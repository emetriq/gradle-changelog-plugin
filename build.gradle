buildscript {
    repositories { jcenter() }

    dependencies {
        classpath 'ca.cutterslade.gradle:gradle-dependency-analyze:1.3.0'
        classpath 'org.ajoberstar.grgit:grgit-core:3.0.0-beta.1'
        classpath 'org.codehaus.groovy:groovy:2.5.0'
    }
}

plugins {
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'nebula.release' version '8.0.3'
    id 'maven'
    id 'groovy'
}

group = 'com.emetriq.gradle'

// check dependencies
apply plugin: "ca.cutterslade.analyze"

repositories { jcenter() }

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7


dependencies {
    compile gradleApi()
    compile 'com.netflix.nebula:nebula-release-plugin:8.0.3'
    compile 'org.ajoberstar.grgit:grgit-core:3.0.0-beta.1'
    compile 'org.codehaus.groovy:groovy:2.5.0'

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile 'com.netflix.nebula:nebula-test:7.1.0'
}


// For publishing the plugin

pluginBundle {
    website = 'https://github.com/emetriq/gradle-changelog-plugin'
    vcsUrl = 'https://github.com/emetriq/gradle-changelog-plugin'
    description = 'Creating a semi-automatic changelog on top of nebula release plugin'
    tags = ['changelog', 'release', 'emetriq', 'versioning']

    plugins {
        changeReleasePlugin {
            id = 'emetriq.changelog-release'
            displayName = 'Changelog Release Plugin'
        }
    }

    mavenCoordinates {
        groupId = project.group
        artifactId = project.name
        version = project.version
    }
}

if (hasProperty("publishPlugin") ? publishPlugin.toBoolean() : false) {
    project.tasks.release.finalizedBy(publishPlugins)
}

def nexusUserName = project.hasProperty('all.nexus.deployment.user') ? project.getProperties()['all.nexus.deployment.user'] : ''
def nexusUserPasswd = project.hasProperty('all.nexus.deployment.passwd') ? project.getProperties()['all.nexus.deployment.passwd'] : ''
def nexusUrl = project.hasProperty('all.nexus.deployment.releaseUrl') ? project.getProperties()['all.nexus.deployment.releaseUrl'] : ''

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.archives
        repository(id: 'nexus', url: nexusUrl) {
            authentication(userName: nexusUserName, password: nexusUserPasswd)
        }
    }
}


if (!nexusUrl.isEmpty()) {
    project.tasks.release.finalizedBy(uploadArchives)
}
